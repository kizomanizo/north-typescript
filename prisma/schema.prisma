// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  firstName     String    @db.VarChar(50)
  middleName    String?   @db.VarChar(50)
  lastName      String    @db.VarChar(50)
  address       String?
  mobilePhone   String?
  birthDate     DateTime?
  nextOfKin     String?
  dateOfBirth   DateTime?
  gender        String?
  maritalStatus String?
  occupation    String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime?
  createdBy     String?
  User          User[]

  @@map("person")
}

model Role {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  name      String    @unique @db.VarChar(30)
  access    String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  createdBy String?
  User      User[]

  @@map("user_role")
}

model User {
  id            Int             @id @default(autoincrement())
  uuid          String          @unique @default(uuid())
  email         String          @unique @db.VarChar(50)
  passwordHash  String
  joinDate      DateTime        @default(now())
  lastLogin     DateTime?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?
  createdBy     String?
  personId      String?
  Person        Person?         @relation(fields: [personId], references: [uuid])
  Role          Role?           @relation(fields: [roleId], references: [uuid])
  roleId        String?
  Transaction   Transaction[]
  Loan          Loan[]
  Share         Share[]
  Fine          Fine[]
  Jamii         Jamii[]
  Recalculation Recalculation[]

  @@map("user")
}

model PaymentMode {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid())
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  name        String
  Transaction Transaction[]

  @@map("payment_mode")
}

model TransactionType {
  id          Int           @id @default(autoincrement())
  uuid        String        @unique @default(uuid())
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?
  createdBy   String?
  name        String
  Transaction Transaction[]

  @@map("transaction_type")
}

model LoanType {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  createdBy String?
  name      String
  Loan      Loan[]

  @@map("loan_type")
}

model Transaction {
  id                Int              @id @default(autoincrement())
  uuid              String           @unique @default(uuid())
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime?
  createdBy         String?
  amount            Float
  PaymentType       PaymentMode?     @relation(fields: [paymentTypeId], references: [id])
  paymentTypeId     Int?
  TransactionType   TransactionType? @relation(fields: [transactionTypeId], references: [id])
  transactionTypeId Int?
  User              User?            @relation(fields: [userId], references: [id])
  userId            Int?
  Share             Share[]
  Fine              Fine[]
  Expense           Expense[]
  Jamii             Jamii[]

  @@map("transaction")
}

model Loan {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid())
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  createdBy      String?
  requestDate    DateTime
  loanAmount     Float
  loanCode       String
  issuedAmount   Float?
  isAccepted     Boolean
  isFlagged      Boolean
  isCompleted    Boolean
  isRecalculated Boolean
  endDate        DateTime
  LoanType       LoanType?       @relation(fields: [loanTypeId], references: [id])
  loanTypeId     Int?
  User           User?           @relation(fields: [userId], references: [id])
  userId         Int?
  Recalculation  Recalculation[]

  @@map("loan")
}

model Share {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  createdBy     String?
  purchaseDate  DateTime
  amount        Float
  Shares        Int
  isFined       Boolean
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?

  @@map("share")
}

model Fine {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  createdBy     String?
  fineDate      DateTime
  fineReason    String
  paidDate      DateTime?
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?

  @@map("fine")
}

model Expense {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  createdBy     String?
  date          DateTime
  reason        String
  amount        Float
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?

  @@map("expense")
}

model Jamii {
  id            Int          @id @default(autoincrement())
  uuid          String       @unique @default(uuid())
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?
  createdBy     String?
  amount        Float
  User          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  Transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId Int?
}

model Recalculation {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  createdBy String?
  rate      Float
  amount    Float
  date      DateTime
  isPaid    Boolean
  Loan      Loan?     @relation(fields: [loanId], references: [id])
  loanId    Int?
  User      User?     @relation(fields: [userId], references: [id])
  userId    Int?

  @@map("recalculation")
}

model Meeting {
  id           Int       @id @default(autoincrement())
  uuid         String    @unique @default(uuid())
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?
  createdBy    String?
  type         String
  date         DateTime
  venue        String
  quorumMet    Boolean
  notesLink    String?
  notes        String?   @db.LongText
  participants String    @db.Text
  excuses      String?   @db.Text

  @@map("meeting")
}
